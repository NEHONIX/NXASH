import { useState } from "react";
import { useDispatch } from "react-redux";
import { createCourse } from "@/store/slices/courseSlice";
import { CourseLevel, Course as CreateCourseDto  } from "@/types/course";
import { FiX, FiUpload } from "react-icons/fi";
import "./NewCourseModal.scss";

interface NewCourseModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const NewCourseModal = ({ isOpen, onClose }: NewCourseModalProps) => {
  const dispatch = useDispatch();
  const [formData, setFormData] = useState<CreateCourseDto>({
    title: "",
    description: "",
    level: "FrontEnd-N0",
    duration: 0,
    category: "",
    prerequisites: [],
    objectives: [],
  });

  const [thumbnailPreview, setThumbnailPreview] = useState<string | null>(null);
  const [prerequisiteInput, setPrerequisiteInput] = useState("");
  const [objectiveInput, setObjectiveInput] = useState("");

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleThumbnailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setThumbnailPreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handlePrerequisiteAdd = () => {
    if (prerequisiteInput.trim()) {
      setFormData((prev) => ({
        ...prev,
        prerequisites: [
          ...(prev.prerequisites || []),
          prerequisiteInput.trim(),
        ],
      }));
      setPrerequisiteInput("");
    }
  };

  const handleObjectiveAdd = () => {
    if (objectiveInput.trim()) {
      setFormData((prev) => ({
        ...prev,
        objectives: [...prev.objectives, objectiveInput.trim()],
      }));
      setObjectiveInput("");
    }
  };

  const removePrerequisite = (index: number) => {
    setFormData((prev) => ({
      ...prev,
      prerequisites: prev.prerequisites?.filter((_, i) => i !== index),
    }));
  };

  const removeObjective = (index: number) => {
    setFormData((prev) => ({
      ...prev,
      objectives: prev.objectives.filter((_, i) => i !== index),
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await dispatch(createCourse(formData) as any);
      onClose();
    } catch (error) {
      //console.error('Erreur lors de la création du cours:', error);
    }
  };

  const courseLevels: CourseLevel[] = [
    "FrontEnd-N0",
    "BackEnd-N0",
    "FullStack-F0",
    "FrontEnd-N1",
    "BackEnd-N1",
    "FullStack-F1",
    "FrontEnd-N2",
    "BackEnd-N2",
    "FullStack-F2",
  ];

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h2>Nouveau cours</h2>
          <button className="close-button" onClick={onClose}>
            <FiX />
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="title">Titre du cours*</label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleChange}
              required
              placeholder="Ex: Introduction au développement Frontend"
            />
          </div>

          <div className="form-group">
            <label htmlFor="description">Description*</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              required
              placeholder="Description détaillée du cours..."
              rows={4}
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="level">Niveau*</label>
              <select
                id="level"
                name="level"
                value={formData.level}
                onChange={handleChange}
                required
              >
                {courseLevels.map((level) => (
                  <option key={level} value={level}>
                    {level
                      .split("-")
                      .map((part) =>
                        part === "N0"
                          ? "Niveau 0"
                          : part === "N1"
                          ? "Niveau 1"
                          : part === "N2"
                          ? "Niveau 2"
                          : part === "F0"
                          ? "Niveau 0"
                          : part === "F1"
                          ? "Niveau 1"
                          : part === "F2"
                          ? "Niveau 2"
                          : part
                      )
                      .join(" - ")}
                  </option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="category">Catégorie*</label>
              <input
                type="text"
                id="category"
                name="category"
                value={formData.category}
                onChange={handleChange}
                required
                placeholder="Ex: Développement Web"
              />
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="duration">Durée estimée (minutes)*</label>
            <input
              type="number"
              id="duration"
              name="duration"
              value={formData.duration}
              onChange={handleChange}
              required
              min="0"
              step="15"
            />
          </div>

          <div className="form-group">
            <label>Prérequis</label>
            <div className="input-with-button">
              <input
                type="text"
                value={prerequisiteInput}
                onChange={(e) => setPrerequisiteInput(e.target.value)}
                placeholder="Ajouter un prérequis..."
                onKeyPress={(e) =>
                  e.key === "Enter" &&
                  (e.preventDefault(), handlePrerequisiteAdd())
                }
              />
              <button type="button" onClick={handlePrerequisiteAdd}>
                Ajouter
              </button>
            </div>
            <div className="tags-container">
              {formData.prerequisites?.map((prerequisite, index) => (
                <span key={index} className="tag">
                  {prerequisite}
                  <button
                    type="button"
                    onClick={() => removePrerequisite(index)}
                  >
                    ×
                  </button>
                </span>
              ))}
            </div>
          </div>

          <div className="form-group">
            <label>Objectifs d'apprentissage*</label>
            <div className="input-with-button">
              <input
                type="text"
                value={objectiveInput}
                onChange={(e) => setObjectiveInput(e.target.value)}
                placeholder="Ajouter un objectif..."
                onKeyPress={(e) =>
                  e.key === "Enter" &&
                  (e.preventDefault(), handleObjectiveAdd())
                }
              />
              <button type="button" onClick={handleObjectiveAdd}>
                Ajouter
              </button>
            </div>
            <div className="tags-container">
              {formData.objectives.map((objective, index) => (
                <span key={index} className="tag">
                  {objective}
                  <button type="button" onClick={() => removeObjective(index)}>
                    ×
                  </button>
                </span>
              ))}
            </div>
          </div>

          <div className="form-group">
            <label>Image de couverture</label>
            <div className="thumbnail-upload">
              {thumbnailPreview ? (
                <div className="thumbnail-preview">
                  <img src={thumbnailPreview} alt="Aperçu" />
                  <button
                    type="button"
                    onClick={() => {
                      setThumbnailPreview(null);
                    }}
                  >
                    Supprimer
                  </button>
                </div>
              ) : (
                <div className="upload-placeholder">
                  <FiUpload className="icon" />
                  <span>Cliquez ou glissez une image ici</span>
                  <input
                    type="file"
                    onChange={handleThumbnailChange}
                    accept="image/*"
                  />
                </div>
              )}
            </div>
          </div>

          <div className="modal-actions">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onClose}
            >
              Annuler
            </button>
            <button type="submit" className="btn btn-primary">
              Créer le cours
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default NewCourseModal;
